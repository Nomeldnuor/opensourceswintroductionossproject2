# -*- coding: utf-8 -*-
"""OSS Project 2-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h-IMV4skM6Xg0V5nxqAbJqUyeC4eO5Vf
"""

import pandas as pd
import math
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR


def sort_dataset(dataset_df):
	return dataset_df.sort_values(by='year')
	#TODO: Implement this function

def split_dataset(dataset_df):
	tar = dataset_df['salary']*0.001
	return train_test_split(dataset_df,tar,test_size=0.1015)
	#TODO: Implement this function

def extract_numerical_cols(dataset_df):
	retdf = pd.DataFrame(dataset_df, columns = ['age', 'G', 'PA', 'AB', 'R', 'H', '2B', '3B', 'HR', 'RBI', 'SB', 'CS', 'BB', 'HBP', 'SO', 'GDP', 'fly', 'war'])
	return retdf
	#TODO: Implement this function

def train_predict_decision_tree(X_train, Y_train, X_test):
	dt_cls= DecisionTreeRegressor()
	dt_cls.fit(X_train, Y_train)
	return dt_cls.predict(X_test)
	#TODO: Implement this function

def train_predict_random_forest(X_train, Y_train, X_test):
	dt_cls= RandomForestRegressor()
	dt_cls.fit(X_train, Y_train)
	return dt_cls.predict(X_test)
	print()
def train_predict_svm(X_train, Y_train, X_test):
	dt_cls=SVR()
	dt_cls.fit(X_train, Y_train)
	return dt_cls.predict(X_test)
def calculate_RMSE(labels, predictions):
	totalval=0
	#print(labels)
	#print(labels.iloc[0]," ",labels.iloc[1])
	for i in range(1,len(labels)):
		totalval= totalval+(labels.iloc[i]-predictions[i])**2
	return math.sqrt(totalval/len(labels))

if __name__=='__main__':
	#DO NOT MODIFY THIS FUNCTION UNLESS PATH TO THE CSV MUST BE CHANGED.
	data_df = pd.read_csv('2019_kbo_for_kaggle_v2.csv')

	sorted_df = sort_dataset(data_df)
	X_train, X_test, Y_train, Y_test = split_dataset(sorted_df)

	X_train = extract_numerical_cols(X_train)
	X_test = extract_numerical_cols(X_test)

	dt_predictions = train_predict_decision_tree(X_train, Y_train, X_test)
	rf_predictions = train_predict_random_forest(X_train, Y_train, X_test)
	svm_predictions = train_predict_svm(X_train, Y_train, X_test)

	print ("Decision Tree Test RMSE: ", calculate_RMSE(Y_test, dt_predictions))
	print ("Random Forest Test RMSE: ", calculate_RMSE(Y_test, rf_predictions))
	print ("SVM Test RMSE: ", calculate_RMSE(Y_test, svm_predictions))

